<?php

/**
 * @file
 * Creates a widget called 'Toggle Radio' using the the Block Reference field.
 * This widget will allow only one block being referenced and can  be toggled on ('show') or off ('hide') on a PER NODE (or any entity) basis.
 *
 * If the site has so many blocks, it might be difficult to look for the one  block that you need.
 * And if you need only one block to display for a given content type, then this module simplifies the select list on the node edit form
 * with only 2 choices: to 'show' or 'hide' that block.
 *
 * This module uses the 'moddelta' string that was introduced in Block Reference 2.0.
 * Example of a moddelta string is "system:main-menu." The module is 'system' that created the block and the delta is 'main-menu.'
 */

/**
 * Implements hook_field_widget_info().
 * Define the blockereference field widget 'Toggle Radio'
 */
function blockreference_toggle_field_widget_info() {
  return array(
    'blockreference_toggle_radio' => array(
      'label' => t('Toggle Radio'),
      'field types' => array('blockreference'),
      'settings' => array('number_of_blocks_threshold' => 30),
      'behaviors' => array(
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}


/**
 * Implements hook_field_widget_settings_form().
 */
function blockreference_toggle_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  // do this only when the widget is of the type 'blockreference_toggle_radio'
  if ($widget['type'] != 'blockreference_toggle_radio') {
    return;
  }
  // get all blocks
  $all_blocks = _blockreference_find_blocks($instance);
  // format all blocks as 'key' => 'name' as options for checkboxes
  $options = _blockreference_options($all_blocks);
  $number_of_blocks = count($options);

  $blocks_threshold_number = 20;
  // if number of blocks is greater than a set number, use autocomplete widget
  $use_autocomplete = FALSE;
  if ( $number_of_blocks > $blocks_threshold_number ) {
    $use_autocomplete = TRUE;
  }

  // form element for selecting the default block to toggle 'on' or 'off'
  $form['blockreference_toggle_default_block'] = array(
    '#type' => 'radios',
    '#title' => t('The block being referenced and toggled ON or OFF'),
    '#default_value' => empty($settings['blockreference_toggle_default_block']) ? NULL : $settings['blockreference_toggle_default_block'],
    '#required' => TRUE,
    '#options' => $options,
    '#weight' => 4,
  );

  // if widget is SET TO USE autocomplete,
  if ($use_autocomplete == true ) {
    $moddelta = empty($settings['blockreference_toggle_default_block']) ? NULL : $settings['blockreference_toggle_default_block'];
    if (empty($moddelta)) {
      $default_value_ac = '';
    }
    else {
      $block_obj = _blockreference_toggle_get_block_info($moddelta);
      $block_name = $block_obj->info;

      // get autocompelte string from a given block object
      $default_value_ac = _blockreference_block_string($block_obj);
    }



    // form element for selecting the default block using autocomplete widget
    $form['blockreference_toggle_default_block'] = array(
      '#type' => 'textfield',
      '#default_value' => '',
      '#autocomplete_path' => 'blockreference-toggle/autocomplete',
      '#default_value' =>  $default_value_ac,
      '#size' => 60,
      '#required' => TRUE,
      '#title' => t('The block being referenced and to be toggled ON or OFF'),
      '#element_validate' => array('blockreference_toggle_autocomplete_validate'),
      '#xxxvalue_callback' => 'blockreference_autocomplete_value',
      '#weight' => 5,
      '#description' => t('When the number of blocks on this site exceed %number_of_blocks , this widget will turn from checkboxes to autocomplete. IMPORTANT: Will be set to empty if you enter an invalid string.', array('%number_of_blocks' => $blocks_threshold_number)),
    );
  }
  return $form;
}


/**
 * Implements hook_field_widget_form().
 */
function blockreference_toggle_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  //define('BLOCKREFERENCE_TOGGLE_ADD_MODE', 'add');
  //define('BLOCKREFERENCE_TOGGLE_EDIT_MODE', 'edit');

  // check if the entity add/edit form is on the ADD or EDIT mode
  $entity_type = $element['#entity_type'];
  $entity_info = entity_get_info($entity_type);
  $entity_id_key = $entity_info['entity keys']['id'];
  if (!isset($element['#entity']->$entity_id_key) || $element['#entity']->$entity_id_key == 0 || empty($element['#entity']->$entity_id_key)) {
    $entity_edit_mode = 'add';
  }
  else {
    $entity_edit_mode  = 'edit';
  }

  // get the default display mode from the widget settings -- hook_field_widget_settings_form
  $settings_default_display_mode = empty($instance['widget']['settings']['blockreference_toggle_default_display_mode']) ? 'hide' : $instance['widget']['settings']['blockreference_toggle_default_display_mode'];

  // get the default block from the widget settings -- hook_field_widget_settings_form
  // a block has been configured
  if (!empty($instance['widget']['settings']['blockreference_toggle_default_block'])) {
    $block_configured = TRUE;
    $settings_default_block_moddelta =  $instance['widget']['settings']['blockreference_toggle_default_block'];
    $settings_default_block_moddelta_array = explode(':',$settings_default_block_moddelta);
    // get the human-readable name of the default block
    $module = $settings_default_block_moddelta_array[0];
    $delta = $settings_default_block_moddelta_array[1];
    $block_obj = _blockreference_block($module, $delta);
    $block_name = $block_obj->info;

    $block_obj = _blockreference_toggle_get_block_info($settings_default_block_moddelta);
    $block_name = $block_obj->info;
  }
  // no block has been configured
  else {
    $block_configured = FALSE;
    $block_name = "No block has been configured yet.";
    $settings_default_block_moddelta = NULL;
  }

  // get the default display mode
  if (empty($instance['default_value']) || $instance['default_value'][0]['moddelta'] == 'hide') {
    $settings_default_display_mode = 'hide';
  }
  // then the value
  else {
    $settings_default_display_mode = 'show';
  }

  // start getting the required varirables to build the widget
  $field_name = $field['field_name'];
  $form_id = $form_state['build_info']['form_id'];

  //  if we are on a a node (or any entity) ADD form
  if ($entity_edit_mode == 'add') {
    // check if a default block has been configured
    if ($block_configured == TRUE) {
      $options = array(
        'hide' => 'Hide',
        'show' => 'Show: '.$block_name,
      );
      $widget_default_value  = $settings_default_display_mode;
    }
    // a block has not been configured
    else {
      // if we are on the field ui edit form
      if ($form_state['build_info']['form_id'] == 'field_ui_field_edit_form') {
        $options = array(
          'hide' => 'Hide',
          'show' => 'Show',
        );
      }
      // if we are on the node (or any entity) add form
      else {
        $options = array(
        'hide' => 'Hide -- No block has been configured yet.',
      );
      }
      $widget_default_value = 'hide';

    }
  }

  //  if we are on a node (or any entity) EDIT form
  if ($entity_edit_mode == 'edit') {
    $options = array(
      'hide' => 'Hide',
      'show' => 'Show: '.$block_name,
    );
    if (empty($items)) {
      $widget_default_value = 'hide';
    }
    else {
      $widget_default_value = 'show';
    }
  }

  // build the widget form
  $element += array(
    '#type' => 'radios',
    '#title' => t('Block Referenced'),
    '#default_value' => $widget_default_value,
    '#options' => $options,
    '#element_validate' => array('_blockreference_toggle_validate'),
  );

  $element = array('moddelta' => $element);
  return $element;
}

/**
 * Helper function to get block info from a moddelta string
 *
 */
function _blockreference_toggle_get_block_info($moddelta = '') {
    $block_moddelta_array = explode(':', $moddelta);
    // get the human-readable name of the default block
    $module = $block_moddelta_array[0];
    $delta = $block_moddelta_array[1];
    $block_obj = _blockreference_block($module, $delta);
    $block_name = $block_obj->info;
    return $block_obj;
}




/**
 * Implements hook_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id).
 * This is called on the field edit form
 */
function blockreference_toggle_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {

  // check if field is not of type 'blockreference'
  if ($form['#field']['type'] != 'blockreference') {
    return;
  }
  // check if widget is not a 'Toggle ragio'
  if ($form['#instance']['widget']['type'] != 'blockreference_toggle_radio') {
    return;
  }

  // If on the field ui edit form, then
  if ($form_id == 'field_ui_field_edit_form') {
    // remove the checkboxes for the Modules being referenced. we wont be filtering the list
    unset($form['instance']['settings']['blockreference_modules']);
  }

  $form['instance']['required']['#disabled'] = TRUE;
  // cardinality should always be 1. We can only toggle 'hide' or 'show' 1 block.
  $form['field']['cardinality']['#disabled'] = TRUE;
}

/**
 * Validate the widget. If the choice is '_none' , then it must be set to NULL so it is not saved to the database
 */
function _blockreference_toggle_validate($element, &$form_state, $form) {
  $field_name = $element['#field_name'];
  $lang = $element['#language'];
  $selected_value = $form_state['values'][$field_name][$lang][0]['moddelta'];
  $form_id = $form_state['build_info']['form_id'];
  if ($selected_value == 'hide') {
    $form_state['values'][$field_name][$lang][0]['moddelta'] = NULL;
    //$form_state['field'][$field_name][$lang]['instance']['default_value'][0]['moddelta'] = NULL;
    form_set_value($element, NULL, $form_state);
  }
  // the selected value is 'show', not 'hide'.
  // Then, set value to the moddelta (which is the actual name of the block and the block delta: example, 'system:main-menu'
  else {
    // if on field ui form the select value is
    // $form_id = 'field_ui_field_edit_form';
    if ($form_id == 'field_ui_field_edit_form') {
    // $selected_value = $form_state['values'][$field_name]['$lang][0]['moddelta'];
      $default_block = $form_state['values']['instance']['widget']['settings']['blockreference_toggle_default_block'];
    }
    // if on node add or edit form
    // then since the selected value is 'show' , then get the default block from the field settings
    else {
      $default_block = $form_state['field'][$field_name][$lang]['instance']['widget']['settings']['blockreference_toggle_default_block'];
    }
    form_set_value($element, $default_block, $form_state);
  }
}

/**
 * Implements hook_field_display_alter()
 *
 * Does not render  the field if the saved block value does not match the widget settings block value.
 * This happens when a block has already been configured and,
 * then it was changed after some nodes already exist using the old configured block
 */
function blockreference_toggle_field_display_alter(&$display, $context) {
  $field_type = $context['field']['type'];
  if ($field_type != 'blockreference') {
    return;
  }
  // if not a 'Toggle Radio' widget then return
  if ($context['instance']['widget']['type'] != 'blockreference_toggle_radio') {
    return;
  }
  // $display['label'] = NULL;
  $field_name = $context['field']['field_name'];

  // the field is already hidden or empty
  $field = $context['entity']->$field_name;
  if (empty($field)) {
    return;
  }

  // get the field's block value
  $item_block_value = $field['und'][0]['moddelta'];

  // get the field settings block value
  $settings_block_value = $context['instance']['widget']['settings']['blockreference_toggle_default_block'];
  if ( $item_block_value != $settings_block_value) {
    // do not render the field
    $display['type'] = NULL;
    $display['label'] = 'hidden';
  }
}







/**
 * Menu callback for the autocomplete results.
 */
function blockreference_toggle_autocomplete($search_string) {

  // use Block Reference function to get all blocks, instead of creating another function
  $instance = NULL;
  $context = NULL;
  $blocks = _blockreference_find_blocks($instance, $search_string, $context);
  $options = _blockreference_options($blocks, TRUE);
  drupal_json_output($options);
}

/**
 * helper function  to get  all blocks in the format of system:main-menu -- Main Menu
 * TODO: This is a function in progress
 * The intention is to not include other blocks as option in the selection list.
 * TODO: Fieldblocks can be included if the field type is a blockreference. This will be redundant. The field is already a block and is being turned into a block by fieldblock.
 */
function blockreference_toggle_get_all_blocks($search_string = "") {
  $all_block_infos = &drupal_static(__FUNCTION__, array());

  // ignore blocks created by these modules. Fieldblock should not be included because
  //  it is merely converting this field to a block -- which is redundant as this field module is already referencing only blocks.
  $modules_ignored = array('fieldblock');

  // caching
  if (empty($all_block_infos)) {
    $all_block_infos = array();
    $options = array();
    foreach (module_implements('block_info') as $module) {
      if ($blocks = module_invoke($module, 'block_info')) {
        if (in_array($module, $modules_ignored)) {
          continue;
        }
        foreach ($blocks as $delta => $info) {
          $moddelta = $module . ':' . $delta;
          $all_block_infos[$moddelta] = _blockreference_block($module, $delta, $info);
          $block_obj = $all_block_infos[$moddelta];
        }
      }
    }
  }
  $options = _blockreference_options($all_block_infos, TRUE);
  return $options;
}


/**
 * Implements hook_menu().
 */
function blockreference_toggle_menu() {
  $items = array();
  $items['blockreference-toggle/autocomplete'] = array(
    'title' => 'blockreference toggle autocomplete',
    'page callback' => 'blockreference_toggle_autocomplete',
    'TODOaccess callback' => 'blockreference_toggle_autocomplete_access',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * TODO
 * Menu access callback for the autocomplete path.
 */
function blockreference_toggle_autocomplete_access() {
  return TRUE;
}


/**
 * Validation callback for a blockreference toggle widget settings autocomplete element.
 */
function blockreference_toggle_autocomplete_validate($element, &$form_state, $form) {
  $user_input_value = $element['#value'];

  // get the autocomplete string (title [mod:delta] format) based on user input
  // this will return only empty or the correct ac string
  $correct_ac_string  = blockreference_autocomplete_value($element, FALSE, $form_state);

  if (!empty($correct_ac_string)) {
    // get block info in the form of array given an ac string
    $block_info = _blockreference_block_from_ac_string($correct_ac_string);

    // the block cannot be found.
    if (!$block_info) {
      return form_error($element, t('%name: Block entered is not valid.', array('%name' => $element['#title'])));
    }
    // build the moddelta string ('block:1') format based on ac string ('Block Name [block:1]')
    $moddelta = implode(':', $block_info);

    // set the element value as string in moddelta format:  'block:1'
    form_set_value($element, $moddelta, $form_state);
    return;
  }
  // the string entered is not valid
  else {
    return form_error($element, t('%name: Block entered is not valid.', array('%name' => $element['#title'])));
  }
}